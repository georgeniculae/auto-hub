server:
  port: ${random.int(8089,9090)}
  error:
    include-message: always
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  servlet:
    context-path: /agency

spring:
  application:
    name: swift-wheels-hub-agency
  threads:
    virtual:
      enabled: true
  codec:
    max-in-memory-size: 20MB
  datasource:
    url: jdbc:p6spy:postgresql://localhost:5432/swift_wheels_hub_agency
    username: ${POSTGRESQL_USERNAME}
    password: ${POSTGRESQL_PASSWORD}
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: true
    open-in-view: false
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.yaml
  cloud:
    loadbalancer:
      enabled: true
      cache:
        enabled: true
    consul:
      enabled: true
      host: localhost
      port: 8500
      discovery:
        enabled: true
        prefer-ip-address: true
        instanceId: ${spring.application.name}-id
        serviceName: ${spring.application.name}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        hostname: localhost
        failFast: false
    function:
      definition: updatedCarBookingSavedConsumer;updatedCarBookingUpdatedConsumer;updatedCarInvoiceClosedConsumer
    stream:
      defaultBinder: kafka
      bindings:
        updatedCarBookingSavedConsumer-in-0:
          binder: kafka
          destination: ${SAVE_BOOKING_CAR_UPDATE_TOPIC}
          contentType: application/json
          group: ${AGENCY_CONSUMER_GROUP}
          consumer:
            default-retryable: true
            max-attempts: 3
            back-off-max-interval: 10000
            back-off-multiplier: 1.0
        updatedCarBookingUpdatedConsumer-in-0:
          binder: kafka
          destination: ${UPDATE_BOOKING_CARS_UPDATE_TOPIC}
          contentType: application/json
          group: ${AGENCY_CONSUMER_GROUP}
          consumer:
            default-retryable: true
            max-attempts: 3
            back-off-max-interval: 10000
            back-off-multiplier: 1.0
        updatedCarInvoiceClosedConsumer-in-0:
          binder: kafka
          destination: ${INVOICE_CAR_UPDATE_DETAILS_TOPIC}
          contentType: application/json
          group: ${AGENCY_CONSUMER_GROUP}
          consumer:
            default-retryable: true
            max-attempts: 3
            back-off-max-interval: 10000
            back-off-multiplier: 1.0
      kafka:
        binder:
          auto-create-topics: true
          auto-add-partitions: false
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            allow.auto.create.topics: true
            auto.offset.reset: latest
        bindings:
          updatedCarBookingSavedConsumer-in-0:
            consumer:
              ack-mode: MANUAL_IMMEDIATE
          updatedCarBookingUpdatedConsumer-in-0:
            consumer:
              ack-mode: MANUAL_IMMEDIATE
          updatedCarInvoiceClosedConsumer-in-0:
            consumer:
              ack-mode: MANUAL_IMMEDIATE
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      enable-auto-commit: false
    listener:
      missing-topics-fatal: false
  servlet:
    multipart:
      enabled: true
      max-file-size: 15MB
      max-request-size: 15MB
  sql:
    init:
      mode: always
  docker:
    compose:
      enabled: false

springdoc:
  swagger-ui:
    enabled: true
    path: /definition/swagger-ui.html
    operationsSorter: method
  api-docs:
    path: /definition/v3/api-docs

management:
  server:
    port: ${server.port}
  endpoint:
    health:
      group:
        custom:
          show-components: always
          show-details: always
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,loggers,prometheus
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  level:
    org:
      springframework:
        security: ERROR
        web:
          csrf:
            CsrfFilter: ERROR
        jdbc:
          core:
            JdbcTemplate: ERROR
            StatementCreatorUtils: ERROR
      hibernate:
        SQL: ERROR
        type:
          descriptor:
            sql:
              BasicBinder: ERROR

apikey:
  secret: ${API_KEY_SECRET}

cors:
  mapping: '/**'
  allowedOrigins: '*'
  allowedMethods: '*'
  allowedHeaders: '*'

decorator:
  datasource:
    p6spy:
      enable-logging: true
      logging: slf4j
